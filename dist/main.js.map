{"version":3,"sources":["main.coffee"],"names":["global","window","this","_","factory","g_time","moment","lodash","require","DATE","DATETIME","prototype","to_date","format","to_datetime","k","ref","unit","date","utc","datetime","numbers","zero","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety","hundred","thousend","million","units","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","w","month","quarter","year","y","decade","length","relative","time","now","amount","i","len","multiplier","offset","part","parts","subparts","guess","trim","toLowerCase","indexOf","substr","slice","replace_text_number","replace","split","pop","parseFloat","join","Error","parseInt","unix","local","isDst","Date","getTimezoneOffset","stdTimezoneOffset","jan","jul","getFullYear","Math","max","start_of_day","date_by_clock","seconds","seconds_of_today","clock","hours","match","minutes","string","number","ref1","textual","from_guess","e","error","type","bindSelf","define","amd","exports","module","returnExports","Time"],"mappings":"CAAA,WAAAA,OAAA,mBAAA,SAAAA,QAAA,mBAAA,SAAAC,QAAAC,IAAA,IAAAC,GAAAC,EAAAC,EAAAC,CACAH,GAAIH,OAAOO,QAAUP,OAAOG,GAAKK,QAAQ,UACzCF,EAASN,OAAOM,QAAUE,QAAQ,UAElCF,EAAOG,KAAO,aACdH,EAAOI,SAAW,sBAClBJ,EAAMK,UAAEC,QAAU,iBACjBV,MAACW,OAAOP,EAAOG,OAChBH,EAAMK,UAAEG,YAAc,iBACrBZ,MAACW,OAAOP,EAAOI,WAEhBL,EAAS,GAAI,YACZ,GAAAU,GAAAC,EAAAC,CAAAf,MAACgB,KAAO,iBAAKZ,GAAOa,MAAMP,WAC1BV,KAACkB,SAAW,iBAAKd,GAAOa,MAAML,eAE9BZ,KAACmB,SACAC,KAAS,EACTC,IAAQ,EACRC,IAAQ,EACRC,MAAU,EACVC,KAAS,EACTC,KAAS,EACTC,IAAQ,EACRC,MAAU,EACVC,MAAU,EACVC,KAAS,EACTC,IAAQ,GACRC,OAAW,GACXC,OAAW,GACXC,SAAa,GACbC,SAAa,GACbC,QAAY,GACZC,QAAY,GACZC,UAAc,GACdC,SAAa,GACbC,SAAa,GACbC,OAAW,GACXC,OAAW,GACXC,MAAU,GACVC,MAAU,GACVC,MAAU,GACVC,QAAY,GACZC,OAAW,GACXC,OAAW,GACXC,QAAY,IACZC,SAAa,IACbC,QAAY,KAEblD,KAACmD,OACAC,YAAgB,EAChBC,GAAO,EACPC,OAAW,IACXC,IAAQ,IACRC,EAAM,IACNC,OAAW,IACXC,IAAQ,IACRC,EAAM,IACNC,KAAS,KACTC,GAAO,KACPC,EAAM,KACNC,IAAQ,MACRC,EAAM,MACNC,KAAS,OACTC,EAAM,OACNC,MAAU,OACVC,QAAY,OACZC,KAAS,QACTC,EAAM,QACNC,OAAW,SAGZzD,EAAAd,KAAAmD,KAAA,KAAAtC,IAAAC,UACID,EAAE2D,OAAS,IACbxE,KAACmD,MAAMtC,EAAE,KAAOE,SAIlBf,MAACyE,SAAW,SAACC,EAAMC,GAClB,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAMA,IALCR,EADEA,EACI3E,KAACoF,MAAMT,GAAKD,KAEZtE,IAGY,gBAATsE,GACT,MAAOtE,GAAOsE,EAKf,IAHAA,EAAOzE,EAAEoF,KAAKX,GAAMY,cAEpBP,EAAa,GACT,IAAI,KAAKQ,QAAQb,EAAK,OAAO,EAClB,MAAXA,EAAK,KACPK,GAAa,GACdL,EAAOzE,EAAEoF,KAAKX,EAAKc,OAAO,QACtB,CAAA,GAAiB,QAAdd,EAAKe,OAAA,GAIZ,MAAOrF,GAAOsE,EAHdK,IAAa,EACbL,EAAOzE,EAAEoF,KAAKX,EAAKe,MAAA,GAAA,IAWpB,IANAf,EAAO1E,KAAC0F,oBAAoBhB,GAE5BA,EAAOA,EAAKiB,QAAQ,gCAAiC,KACrDT,EAAQR,EAAKkB,MAAM,KAEnBZ,EAAS,EACTH,EAAA,EAAAC,EAAAI,EAAAV,OAAAK,EAAAC,EAAAD,IAAA,CAIC,UAHAM,EAAWF,EAAKW,MAAM,OACtB7E,EAAOoE,EAASU,MAChBjB,EAASkB,WAAWX,EAASY,KAAK,MAC/B/F,KAACmD,MAAMpC,GAGT,KAAU,IAAAiF,OAAM,qBAAqBtB,EAFrCM,IAAUD,EAAa/E,KAACmD,MAAMpC,GAAQ6D,EAIxC,MAAOxE,GAAO6F,SAAStB,EAAIhE,OAAO,MAAQqE,IAE3ChF,KAACkG,KAAO,SAAClF,GACR,MAAGA,GACKiF,SAAS7F,EAAOa,IAAID,GAAMmF,QAAQxF,OAAO,MAEzCsF,SAAS7F,IAASO,OAAO,OAOlCX,KAACoG,MAAQ,SAACpF,GAET,MADAA,GAAOA,GAAY,GAAAqF,MACZrF,EAAKsF,oBAAsBtG,KAACuG,kBAAkBvF,IAEtDhB,KAACuG,kBAAoB,SAACvF,GACrB,GAAAwF,GAAAC,CAGA,OAHAzF,GAAOA,GAAY,GAAAqF,MACnBG,EAAU,GAAAH,MAAKrF,EAAK0F,cAAe,EAAG,GACtCD,EAAU,GAAAJ,MAAKrF,EAAK0F,cAAe,EAAG,GAC/BC,KAAKC,IAAIJ,EAAIF,oBAAqBG,EAAIH,sBAE9CtG,KAAC6G,aAAe,SAAC7F,SAChBZ,GAAOA,EAAOY,GAAML,OAAO,cAAc,cAE1CX,KAAC8G,cAAgB,SAACC,EAAS/F,SAC1BZ,GAAO8F,KAAKD,SAASjG,KAAC6G,aAAa7F,GAAML,OAAO,MAAQsF,SAASc,IAAUpG,OAAO,wBAGnFX,KAACgH,iBAAmB,SAACC,GACpB,GAAAC,GAAAC,EAAAC,CACA,OADAD,GAAQF,EAAME,MAAM,oDACjBA,IACFD,EAAQjB,SAASkB,EAAM,IACvBC,EAAUnB,SAASkB,EAAM,IACI,OAA1BA,EAAM,GAAG7B,cACC,KAAT4B,IACFA,GAAS,IAEE,KAATA,IACFA,EAAQ,GACK,KAARA,EAAyB,GAAVE,IAGxBpH,KAACkG,KAAO,iBACPD,UAAS7F,IAASO,OAAO,OAC1BX,KAAC0F,oBAAsB,SAAC2B,GAEvB,GAAAC,GAAAC,EAAAC,CAAAD,GAAAvH,KAAAmB,OAAA,KAAAqG,IAAAD,UACCF,EAASA,EAAO1B,QAAQ6B,EAASF,EAClC,OAAOD,IAGRrH,KAACyH,WAAa,SAACJ,GACd,GAAAK,GAAAtC,CAAA,KAEC,GADAA,EAAQpF,KAACoF,MAAMiC,GAEd,MAAOjC,GAAMV,KAHf,MAAAiD,GAIMD,EAAAC,EAEN,OAAO,GAGR3H,KAACoF,MAAQ,SAACiC,GACT,GAAAN,EAAA,OAAa,QAAVM,GAAoBA,GAAoB,KAAVA,EAE9BpB,SAASoB,GAAQ,KAAMA,GAClB3C,KAAMtE,EAAO8F,KAAKD,SAASoB,IAAUO,KAAK,QAC/CP,YAAkBhB,OAAQgB,YAAkBjH,IACvCsE,KAAMtE,EAAOiH,GAASO,KAAM,QACjCP,EAAOF,MAAM,iEACRzC,KAAMtE,EAAOiH,GAASO,KAAM,SACpCb,EAAU/G,KAACgH,iBAAiBK,GACzBN,KAAW,GACNrC,KAAM1E,KAAC8G,cAAcC,GAAUa,KAAM,UAC7CP,EAASrH,KAAC0F,oBAAoB2B,GAC3BA,EAAOF,MAAM,yBAA2BE,EAAOF,MAAM,aAChDzC,KAAM1E,KAACyE,SAAS4C,GAASO,KAAM,YADvC,UAXQlD,KAAMtE,IAAUwH,KAAM,QAc/B5H,MAMDC,EAAE4H,SAAS1H,GAGXD,EAAU,iBAAKC,IACK,kBAAV2H,SAAwBA,OAAOC,IACxCD,UAAW5H,GACc,gBAAX8H,SACdC,OAAOD,QAAU9H,KAEjBF,KAAKkI,cAAgBhI,IACjBF,KAAKmI,OACRnI,KAAKmI,KAAOnI,KAAKkI","file":"main.js","sourcesContent":["`global= (typeof(global) != 'undefined' && global)  || (typeof(window) != 'undefined' && window) || this`\n_ = global.lodash || global._ || require('lodash')\nmoment = global.moment || require('moment')\n\nmoment.DATE = 'YYYY-MM-DD'\nmoment.DATETIME = 'YYYY-MM-DD HH:mm:ss'\nmoment::to_date = ()->\n\t@format(moment.DATE)\nmoment::to_datetime = ()->\n\t@format(moment.DATETIME)\n\ng_time = new ()->\n\t@date = ()-> moment.utc().to_date()\n\t@datetime = ()-> moment.utc().to_datetime()\n\n\t@numbers =\n\t\t'zero' : 0,\n\t\t'one' : 1,\n\t\t'two' : 2,\n\t\t'three' : 3,\n\t\t'four' : 4,\n\t\t'five' : 5,\n\t\t'six' : 6,\n\t\t'seven' : 7,\n\t\t'eight' : 8,\n\t\t'nine' : 9,\n\t\t'ten' : 10,\n\t\t'eleven' : 11,\n\t\t'twelve' : 12,\n\t\t'thirteen' : 13,\n\t\t'fourteen' : 14,\n\t\t'fifteen' : 15,\n\t\t'sixteen' : 16,\n\t\t'seventeen' : 17,\n\t\t'eighteen' : 18,\n\t\t'nineteen' : 19,\n\t\t'twenty' : 20,\n\t\t'thirty' : 30,\n\t\t'forty' : 40,\n\t\t'fifty' : 50,\n\t\t'sixty' : 60,\n\t\t'seventy' : 70,\n\t\t'eighty' : 80,\n\t\t'ninety' : 90,\n\t\t'hundred' : 100,\n\t\t'thousend' : 1000,\n\t\t'million' : 1000000\n\n\t@units =\n\t\t'millisecond' : 1,\n\t\t'ms' : 1,\n\t\t'second' : 1000,\n\t\t'sec' : 1000,\n\t\t's' : 1000,\n\t\t'minute' : 60000,\n\t\t'min' : 60000,\n\t\t'm' : 60000,\n\t\t'hour' : 3600000,\n\t\t'hr' : 3600000,\n\t\t'h' : 3600000,\n\t\t'day' : 86400000,\n\t\t'd' : 86400000,\n\t\t'week' : 604800000,\n\t\t'w' : 604800000,\n\t\t'month' : 2592000000,\n\t\t'quarter' : 7776000000,\n\t\t'year' : 31536000000,\n\t\t'y' : 31536000000,\n\t\t'decade' : 315360000000\n\n\t# pluralise\n\tfor k, unit of @units\n\t\tif k.length > 1\n\t\t\t@units[k+'s'] = unit\n\n\t# \"one minute ago\"\n\t# \"-1 minute\", '+1 minute'\n\t@relative = (time, now)->\n\t\tif now\n\t\t\tnow = @guess(now).time\n\t\telse\n\t\t\tnow = moment()\n\n\t\t# not a string, pass to moment\n\t\tif typeof(time) != typeof('')\n\t\t\treturn moment(time)\n\n\t\ttime = _.trim(time).toLowerCase()\n\n\t\tmultiplier = 1\n\t\tif ['-','+'].indexOf(time[0]) != -1 # starts with \"+\" or \"-\"\n\t\t\tif time[0] == '-'\n\t\t\t\tmultiplier = -1\n\t\t\ttime = _.trim(time.substr(1))\n\t\telse if time[-3..] == 'ago' # ends with \"ago\"\n\t\t\tmultiplier = -1\n\t\t\ttime = _.trim(time[...-3])\n\t\telse # not expected input, pass to moment\n\t\t\treturn moment(time)\n\n\t\t# replace textual numbers\n\t\ttime = @replace_text_number(time)\n\n\t\ttime = time.replace(/(\\s+and\\s+)|(\\s+&\\s+)|\\s+,\\s+/, ',') # converge splitters\n\t\tparts = time.split(',')\n\n\t\toffset = 0\n\t\tfor part in parts\n\t\t\tsubparts = part.split(/\\s+/)\n\t\t\tunit = subparts.pop()\n\t\t\tamount = parseFloat(subparts.join(''))\n\t\t\tif @units[unit]\n\t\t\t\toffset += multiplier * @units[unit] * amount\n\t\t\telse\n\t\t\t\tthrow new Error('Unit not found in '+time)\n\n\t\treturn moment(parseInt(now.format('x')) + offset)\n\n\t@unix = (date)->\n\t\tif date\n\t\t\treturn parseInt(moment.utc(date).local().format('X'))\n\t\telse\n\t\t\treturn parseInt(moment().format('X'))\n\n\t###\n\tEx\n\tif @isDst(date)\n\t\tp 'it is dst time'\n\t###\n\t@isDst = (date)->\n\t\tdate = date || new Date()\n\t\treturn date.getTimezoneOffset() < @stdTimezoneOffset(date)\n\n\t@stdTimezoneOffset = (date)->\n\t\tdate = date || new Date()\n\t\tjan = new Date(date.getFullYear(), 0, 1)\n\t\tjul = new Date(date.getFullYear(), 6, 1)\n\t\treturn Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset()); # dst always back one hour in compaarison\n\n\t@start_of_day = (date)->\n\t\tmoment(moment(date).format('YYYY-MM-DD')+' 00:00:00')\n\t# get the clock for some Date by offset in seconds from day start\n\t@date_by_clock = (seconds, date)->\n\t\tmoment.unix(parseInt(@start_of_day(date).format('X')) + parseInt(seconds)).format('YYYY-MM-DD HH:mm:ss')\n\n\t# get a string representing the clock for today and turn it into a Date\n\t@seconds_of_today = (clock)->\n\t\tmatch = clock.match(/^\\s*([0-9]{1,2})(:([0-9]{1,2}))\\s*(am|pm)\\s*$/i)\n\t\tif match\n\t\t\thours = parseInt match[1]\n\t\t\tminutes = parseInt match[3]\n\t\t\tif match[4].toLowerCase() == 'pm'\n\t\t\t\tif hours != 12\n\t\t\t\t\thours += 12\n\t\t\telse\n\t\t\t\tif hours == 12\n\t\t\t\t\thours = 0\n\t\t\treturn hours * 3600 + minutes * 60\n\t\treturn false\n\n\t@unix = ()->\n\t\tparseInt(moment().format('X'))\n\t@replace_text_number = (string)->\n\t\t# replace textual numbers\n\t\tfor textual, number of @numbers\n\t\t\tstring = string.replace(textual, number)\n\t\treturn string\n\n\t# guess the time from a string\n\t@from_guess = (string)->\n\t\ttry\n\t\t\tguess = @guess(string)\n\t\t\tif guess\n\t\t\t\treturn guess.time\n\t\tcatch e\n\n\t\treturn false\n\t# make a guess about the time.\n\t#@NOTE\tShould not be used to determine if it is a time\n\t@guess = (string)->\n\t\tif string == 'now' || !string || string == ''\n\t\t\treturn time: moment(), type: 'now'\n\t\tif parseInt(string)+'' == string #unix time\n\t\t\treturn time: moment.unix(parseInt(string)), type:'unix'\n\t\tif string instanceof Date || string instanceof moment\n\t\t\treturn time: moment(string), type: 'Date'\n\t\tif string.match(/^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}( [0-9]{2}:[0-9]{2}:[0-9]{2})?$/)\n\t\t\treturn time: moment(string), type: 'date'\n\t\tseconds = @seconds_of_today(string)\n\t\tif seconds != false\n\t\t\treturn time: @date_by_clock(seconds), type: 'clock'\n\t\tstring = @replace_text_number(string)\n\t\tif string.match(/^\\s*([-+])\\s*[\\-0-9]/) || string.match(/ago\\s*$/i)\n\t\t\treturn time: @relative(string), type: 'relative'\n\n\t@\n\n\n\n\n\n_.bindSelf(g_time)\n\n\nfactory = ()-> g_time\nif typeof define == 'function' && define.amd\n\tdefine([], factory)\nelse if typeof exports == 'object'\n\tmodule.exports = factory()\nelse\n\tthis.returnExports = factory()\n\tif !this.Time\n\t\tthis.Time = this.returnExports"],"sourceRoot":"/source/"}